Index: DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import PyPDF2\r\ndef process(file_path):\r\n        with open(file_path, 'rb') as file:\r\n            reader = PyPDF2.PdfReader(file)\r\n            text = \"\"\r\n            for page in reader.pages:\r\n                text += page.extract_text()\r\n        with open('txt_QuizSource/pdf_text.txt', 'a', encoding='utf-8') as txt_file:\r\n            txt_file.write(text)\r\n        print(f\"文字提取完成，已保存到 pdf_text.txt\")\r\n        return text\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py b/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py
--- a/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py	(date 1753359350346)
@@ -8,4 +8,6 @@
         with open('txt_QuizSource/pdf_text.txt', 'a', encoding='utf-8') as txt_file:
             txt_file.write(text)
         print(f"文字提取完成，已保存到 pdf_text.txt")
-        return text
+        generated = []
+        generated.append('txt_QuizSource/pdf_text.txt')
+        return generated
Index: DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>from vosk import Model,KaldiRecognizer\r\nimport wave\r\nimport pyaudio\r\nimport json\r\ndef process(file_path):\r\n #音频文件识别\r\n voiceModel= Model('vosk-model-small-cn-0.22')\r\n voiceFile=wave.open(file_path, 'rb')\r\n voiceRecognizer=KaldiRecognizer(voiceModel,16000)\r\n while True:\r\n     recognizeData=voiceFile.readframes(4000)\r\n     if not recognizeData:\r\n         break\r\n     voiceRecognizer.AcceptWaveform(recognizeData)\r\n     outputResult = voiceRecognizer.Result()\r\n     txt_path = \"txt_QuizSource/voice_text.txt\"  # 根据需要修改路径\r\n     with open(txt_path, \"a\", encoding=\"utf-8\") as file:\r\n         file.write(json.loads(outputResult)['text'].replace(' ',''))\r\n generated = []\r\n generated.append('txt_QuizSource/voice_text.txt')\r\n return generated\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py b/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py
--- a/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py	(date 1753359316012)
@@ -18,4 +18,4 @@
          file.write(json.loads(outputResult)['text'].replace(' ',''))
  generated = []
  generated.append('txt_QuizSource/voice_text.txt')
- return generated
+ return generated
\ No newline at end of file
Index: DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import textract\r\nimport os\r\nimport chardet\r\n\r\n\r\ndef extract_text_from_file(file_path):\r\n    \"\"\"\r\n    从指定文件中提取文本内容，自动检测编码格式。\r\n    支持的文件格式包括 DOC、DOCX、TXT 等。\r\n    :param file_path: 文件路径\r\n    :return: 提取的文本内容\r\n    \"\"\"\r\n    try:\r\n        # 使用 textract 提取文本（返回 bytes 类型）\r\n        raw_data = textract.process(file_path)\r\n\r\n        # 检测文件编码\r\n        encoding_detect = chardet.detect(raw_data)\r\n        encoding = encoding_detect['encoding'] or 'utf-8'\r\n\r\n        # 尝试解码（忽略无法解码的字符）\r\n        text = raw_data.decode(encoding, errors='ignore')\r\n        return text\r\n    except Exception as e:\r\n        print(f\"提取文件 {file_path} 时发生错误：{e}\")\r\n        return \"\"\r\n\r\n\r\ndef process(file_path):\r\n    \"\"\"\r\n    处理单个文件：提取文本并保存到指定位置\r\n    :param file_path: 要处理的文件路径\r\n    \"\"\"\r\n    # 确保输出目录存在\r\n    os.makedirs('txt_QuizSource', exist_ok=True)\r\n\r\n    # 检查文件是否存在\r\n    if not os.path.exists(file_path):\r\n        print(f\"错误：文件 {file_path} 不存在\")\r\n        return\r\n\r\n    # 提取文件文本\r\n    print(f\"正在处理文件：{os.path.basename(file_path)}\")\r\n    text = extract_text_from_file(file_path)\r\n\r\n    if not text.strip():\r\n        print(\"警告：提取到的文本内容为空\")\r\n        return\r\n\r\n    # 写入输出文件（覆盖模式）\r\n    output_path = 'txt_QuizSource/txt_text.txt'\r\n    with open(output_path, 'a', encoding='utf-8') as txt_file:\r\n        txt_file.write(text)\r\n\r\n    print(f\"文件内容已保存到 {output_path}\")\r\n    generated = []\r\n    generated.append('txt_QuizSource/txt_text.txt')\r\n    return generated
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py b/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py
--- a/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py	(date 1753357750857)
@@ -1,58 +1,138 @@
 import textract
 import os
 import chardet
+import logging
+import re
+from datetime import datetime
+
+# 配置日志
+logging.basicConfig(
+    level=logging.INFO,
+    format='%(asctime)s - %(levelname)s - %(message)s',
+    handlers=[
+        logging.FileHandler("text_extraction.log"),
+        logging.StreamHandler()
+    ]
+)
 
 
 def extract_text_from_file(file_path):
     """
-    从指定文件中提取文本内容，自动检测编码格式。
-    支持的文件格式包括 DOC、DOCX、TXT 等。
+    从指定文件中提取文本内容，优化中文编码处理
     :param file_path: 文件路径
     :return: 提取的文本内容
     """
     try:
-        # 使用 textract 提取文本（返回 bytes 类型）
-        raw_data = textract.process(file_path)
+        # 获取文件扩展名
+        ext = os.path.splitext(file_path)[1].lower()
+
+        # 对于文本文件，使用更智能的编码检测
+        if ext in ['.txt', '.md', '.csv', '.log']:
+            # 先尝试用二进制读取文件内容
+            with open(file_path, 'rb') as f:
+                raw_data = f.read()
 
-        # 检测文件编码
-        encoding_detect = chardet.detect(raw_data)
-        encoding = encoding_detect['encoding'] or 'utf-8'
+            # 检测文件编码
+            encoding_detect = chardet.detect(raw_data)
+            encoding = encoding_detect['encoding'] or 'utf-8'
+            confidence = encoding_detect['confidence']
 
-        # 尝试解码（忽略无法解码的字符）
-        text = raw_data.decode(encoding, errors='ignore')
-        return text
+            # 如果检测置信度低，尝试常见中文编码
+            if confidence < 0.7:
+                for enc in ['utf-8', 'gbk', 'gb18030', 'big5']:
+                    try:
+                        text = raw_data.decode(enc, errors='strict')
+                        logging.info(f"使用备用编码成功解码: {enc}")
+                        return text
+                    except:
+                        continue
+
+            # 尝试解码
+            try:
+                text = raw_data.decode(encoding, errors='strict')
+            except:
+                # 严格模式失败时使用忽略错误模式
+                text = raw_data.decode(encoding, errors='ignore')
+
+            return text
+
+        # 对于其他文件类型使用textract
+        raw_data = textract.process(file_path)
+
+        # 检测文件编码
+        encoding_detect = chardet.detect(raw_data)
+        encoding = encoding_detect['encoding'] or 'utf-8'
+
+        # 尝试解码（忽略无法解码的字符）
+        return raw_data.decode(encoding, errors='ignore')
+
     except Exception as e:
-        print(f"提取文件 {file_path} 时发生错误：{e}")
+        logging.error(f"提取文件 {file_path} 时发生错误：{e}")
         return ""
 
 
+def clean_text(text):
+    """清理和规范化文本内容"""
+    # 移除无效字符
+    text = re.sub(r'[\x00-\x08\x0b\x0c\x0e-\x1f\x7f-\x9f]', '', text)
+    # 规范化换行符
+    text = re.sub(r'\r\n', '\n', text)
+    # 移除多余空行
+    text = re.sub(r'\n{3,}', '\n\n', text)
+    # 移除行首行尾空白
+    text = '\n'.join(line.strip() for line in text.splitlines())
+    return text.strip()
+
+
 def process(file_path):
     """
-    处理单个文件：提取文本并保存到指定位置
+    优化处理单个文件：提取文本并保存到单独文件
     :param file_path: 要处理的文件路径
+    :return: 生成的文本文件路径列表
     """
-    # 确保输出目录存在
-    os.makedirs('txt_QuizSource', exist_ok=True)
+    start_time = datetime.now()
+    generated = []
+
+    try:
+        # 确保输出目录存在
+        os.makedirs('txt_QuizSource', exist_ok=True)
 
-    # 检查文件是否存在
-    if not os.path.exists(file_path):
-        print(f"错误：文件 {file_path} 不存在")
-        return
+        # 检查文件是否存在
+        if not os.path.exists(file_path):
+            logging.error(f"文件不存在: {file_path}")
+            return generated
+
+        filename = os.path.basename(file_path)
+        logging.info(f"开始处理文件: {filename}")
 
-    # 提取文件文本
-    print(f"正在处理文件：{os.path.basename(file_path)}")
-    text = extract_text_from_file(file_path)
+        # 提取文件文本
+        text = extract_text_from_file(file_path)
 
-    if not text.strip():
-        print("警告：提取到的文本内容为空")
-        return
+        if not text.strip():
+            logging.warning("提取到的文本内容为空")
+            return generated
+
+        # 清理文本
+        cleaned_text = clean_text(text)
+
+        # 创建单独的输出文件（每个原始文件对应一个txt文件）
+        output_filename = f"{os.path.splitext(filename)[0]}.txt"
+        output_path = os.path.join('txt_QuizSource', output_filename)
+
+        # 写入输出文件
+        with open(output_path, 'w', encoding='utf-8') as txt_file:
+            txt_file.write(cleaned_text)
+
+        processing_time = datetime.now() - start_time
+        logging.info(f"文件处理成功: {filename} -> {output_filename}")
+        logging.info(f"处理用时: {processing_time.total_seconds():.2f}秒")
+        logging.info(f"提取字符数: {len(cleaned_text)}")
 
-    # 写入输出文件（覆盖模式）
-    output_path = 'txt_QuizSource/txt_text.txt'
-    with open(output_path, 'a', encoding='utf-8') as txt_file:
-        txt_file.write(text)
+        generated.append(output_path)
+        return generated
 
-    print(f"文件内容已保存到 {output_path}")
-    generated = []
-    generated.append('txt_QuizSource/txt_text.txt')
-    return generated
\ No newline at end of file
+    except Exception as e:
+        logging.error(f"处理文件 {file_path} 时发生错误: {e}")
+        return generated
+
+
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"9a773241-1440-404c-beca-3c9873ee4f0e\" name=\"更改\" comment=\"上传txtToTxt.py文件，完成多源文本文件处理模块\">\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"package.json\" />\r\n        <option value=\"Python Script\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"main\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;Justwantee&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/L-team-ai/PQ_LTeamProject&quot;,\r\n    &quot;accountId&quot;: &quot;74d3ac4c-2608-4f86-9a9f-a9862c1b53b0&quot;\r\n  }\r\n}</component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 6\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2zXNLOl9LsxAZTi8XTUwL8dZmrw\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Python.main.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;last_opened_file_path&quot;: &quot;D:/software_for_studying/PQ_LTeamProject&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\software_for_studying\\PQ_LTeamProject\\DataDetectionAndQuizGeneration\\main\\com\\czj\\mapper\\com\" />\r\n      <recent name=\"D:\\software_for_studying\\PQ_LTeamProject\\DataDetectionAndQuizGeneration\\AIFiles\\testFiles\" />\r\n      <recent name=\"D:\\software_for_studying\\PQ_LTeamProject\\DataDetectionAndQuizGeneration\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\software_for_studying\\PQ_LTeamProject\\DataDetectionAndQuizGeneration\\AIFiles\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\">\r\n    <configuration name=\"main\" type=\"PythonConfigurationType\" factoryName=\"Python\" nameIsGenerated=\"true\">\r\n      <module name=\"PQ_LTeamProject\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <envs>\r\n        <env name=\"PYTHONUNBUFFERED\" value=\"1\" />\r\n      </envs>\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"$PROJECT_DIR$\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"true\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"SCRIPT_NAME\" value=\"$PROJECT_DIR$/main.py\" />\r\n      <option name=\"PARAMETERS\" value=\"\" />\r\n      <option name=\"SHOW_COMMAND_LINE\" value=\"false\" />\r\n      <option name=\"EMULATE_TERMINAL\" value=\"false\" />\r\n      <option name=\"MODULE_MODE\" value=\"false\" />\r\n      <option name=\"REDIRECT_INPUT\" value=\"false\" />\r\n      <option name=\"INPUT_FILE\" value=\"\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.23339.19\" />\r\n        <option value=\"bundled-python-sdk-0029f7779945-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.23339.19\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"应用程序级\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"默认任务\">\r\n      <changelist id=\"9a773241-1440-404c-beca-3c9873ee4f0e\" name=\"更改\" comment=\"\" />\r\n      <created>1751873401618</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1751873401618</updated>\r\n      <workItem from=\"1751873402905\" duration=\"9873000\" />\r\n      <workItem from=\"1751956718284\" duration=\"1443000\" />\r\n      <workItem from=\"1751977614789\" duration=\"6000\" />\r\n      <workItem from=\"1751978313816\" duration=\"5000\" />\r\n      <workItem from=\"1752061941029\" duration=\"404000\" />\r\n      <workItem from=\"1752062416377\" duration=\"479000\" />\r\n      <workItem from=\"1752062943712\" duration=\"1264000\" />\r\n      <workItem from=\"1752318275322\" duration=\"920000\" />\r\n      <workItem from=\"1752323580438\" duration=\"130000\" />\r\n      <workItem from=\"1752323869392\" duration=\"8041000\" />\r\n      <workItem from=\"1752500974024\" duration=\"330000\" />\r\n      <workItem from=\"1752501331923\" duration=\"11000\" />\r\n      <workItem from=\"1752501373959\" duration=\"4827000\" />\r\n      <workItem from=\"1752583742585\" duration=\"4704000\" />\r\n      <workItem from=\"1752679861155\" duration=\"2260000\" />\r\n      <workItem from=\"1752758954962\" duration=\"790000\" />\r\n      <workItem from=\"1752944278778\" duration=\"6217000\" />\r\n      <workItem from=\"1753103983738\" duration=\"239000\" />\r\n      <workItem from=\"1753104261613\" duration=\"2131000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"这是一段测试文本。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751883274403</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751883274403</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"这是一段测试文本。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751885320251</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751885320251</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751885534296</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751885534296</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751885637211</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751885637211</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751887027076</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751887027076</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751887394263</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751887394263</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751887569727</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751887569727</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"测试更改。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751887951541</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751887951541</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"将main函数专门用于统合性工作，原用于麦克风识别的代码移入microphoneToTxt.py中,新增pdfToTxt.py用于pdf文件转txt文件。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752324129285</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752324129285</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"新增videoPPTDetect.py用于视频抽帧与重复帧删除。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752500689209</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752500689209</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"新增PPTPictureToTxt.py用于视频帧的文字检测。\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752583250074</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752583250074</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"进行了模块的测试，并上传了测试文件\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752679060728</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752679060728</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"进行了模块的测试，并上传了测试文件\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752758418518</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752758418518</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"杂务文件\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752759035014</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752759035014</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"添加标准配置文件\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752944387044</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752944387044</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"上传txtToTxt.py文件，完成多源文本文件处理模块\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753104087144</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753104087144</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"17\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"这是一段测试文本。\" />\r\n    <MESSAGE value=\"测试更改。\" />\r\n    <MESSAGE value=\"将main函数专门用于统合性工作，原用于麦克风识别的代码移入microphoneToTxt.py中,新增pdfToTxt.py用于pdf文件转txt文件。\" />\r\n    <MESSAGE value=\"新增videoPPTDetect.py用于视频抽帧与重复帧删除。\" />\r\n    <MESSAGE value=\"新增PPTPictureToTxt.py用于视频帧的文字检测。\" />\r\n    <MESSAGE value=\"进行了模块的测试，并上传了测试文件\" />\r\n    <MESSAGE value=\"杂务文件\" />\r\n    <MESSAGE value=\"添加标准配置文件\" />\r\n    <MESSAGE value=\"上传txtToTxt.py文件，完成多源文本文件处理模块\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"上传txtToTxt.py文件，完成多源文本文件处理模块\" />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/PQ_LTeamProject$main.coverage\" NAME=\"main 覆盖结果\" MODIFIED=\"1752065036842\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/DataDetectionAndQuizGeneration\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/.idea/workspace.xml	(date 1753359913841)
@@ -4,8 +4,34 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="9a773241-1440-404c-beca-3c9873ee4f0e" name="更改" comment="上传txtToTxt.py文件，完成多源文本文件处理模块">
+    <list default="true" id="9a773241-1440-404c-beca-3c9873ee4f0e" name="更改" comment="上传voiceFileToTxt.py文件，完成音频文件处理模块">
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/Quiz/generated_quiz.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/inputFiles/yolo.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/inputFiles/弱监督场景下的行人重识别研究综述.pdf" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/inputFiles/组成原理实验一.pptx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/pdf_text.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/ppt_text.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/txt_text.txt" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/voice_text.txt" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/main.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/main.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/pdfToTxt.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/classVideo.mp4" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/inputFiles/classVideo.mp4" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0000.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0001.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0002.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0003.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0004.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0005.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0006.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0007.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0008.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/frame_0009.jpg" beforeDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/testFiles/genshin.wav" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/inputFiles/genshin.wav" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/txtToTxt.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py" beforeDir="false" afterPath="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/voiceFileToTxt.py" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -48,23 +74,25 @@
     <option name="hideEmptyMiddlePackages" value="true" />
     <option name="showLibraryContents" value="true" />
   </component>
-  <component name="PropertiesComponent">{
-  &quot;keyToString&quot;: {
-    &quot;Python.main.executor&quot;: &quot;Run&quot;,
-    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
-    &quot;git-widget-placeholder&quot;: &quot;main&quot;,
-    &quot;last_opened_file_path&quot;: &quot;D:/software_for_studying/PQ_LTeamProject&quot;,
-    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,
-    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,
-    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,
-    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,
-    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,
-    &quot;settings.editor.selected.configurable&quot;: &quot;com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable&quot;,
-    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;
+  <component name="PropertiesComponent"><![CDATA[{
+  "keyToString": {
+    "Python.main (1).executor": "Run",
+    "Python.main.executor": "Run",
+    "RunOnceActivity.ShowReadmeOnStart": "true",
+    "git-widget-placeholder": "main",
+    "last_opened_file_path": "D:/software_for_studying/PQ_LTeamProject/DataDetectionAndQuizGeneration/AIFiles",
+    "node.js.detected.package.eslint": "true",
+    "node.js.detected.package.tslint": "true",
+    "node.js.selected.package.eslint": "(autodetect)",
+    "node.js.selected.package.tslint": "(autodetect)",
+    "nodejs_package_manager_path": "npm",
+    "settings.editor.selected.configurable": "com.jetbrains.python.configuration.PyActiveSdkModuleConfigurable",
+    "vue.rearranger.settings.migration": "true"
   }
-}</component>
+}]]></component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
+      <recent name="D:\software_for_studying\PQ_LTeamProject\DataDetectionAndQuizGeneration\AIFiles" />
       <recent name="D:\software_for_studying\PQ_LTeamProject\DataDetectionAndQuizGeneration\main\com\czj\mapper\com" />
       <recent name="D:\software_for_studying\PQ_LTeamProject\DataDetectionAndQuizGeneration\AIFiles\testFiles" />
       <recent name="D:\software_for_studying\PQ_LTeamProject\DataDetectionAndQuizGeneration" />
@@ -73,7 +101,30 @@
       <recent name="D:\software_for_studying\PQ_LTeamProject\DataDetectionAndQuizGeneration\AIFiles" />
     </key>
   </component>
-  <component name="RunManager">
+  <component name="RunManager" selected="Python.main (1)">
+    <configuration name="main (1)" type="PythonConfigurationType" factoryName="Python" temporary="true" nameIsGenerated="true">
+      <module name="PQ_LTeamProject" />
+      <option name="ENV_FILES" value="" />
+      <option name="INTERPRETER_OPTIONS" value="" />
+      <option name="PARENT_ENVS" value="true" />
+      <envs>
+        <env name="PYTHONUNBUFFERED" value="1" />
+      </envs>
+      <option name="SDK_HOME" value="" />
+      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles" />
+      <option name="IS_MODULE_SDK" value="true" />
+      <option name="ADD_CONTENT_ROOTS" value="true" />
+      <option name="ADD_SOURCE_ROOTS" value="true" />
+      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
+      <option name="SCRIPT_NAME" value="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles/main.py" />
+      <option name="PARAMETERS" value="" />
+      <option name="SHOW_COMMAND_LINE" value="false" />
+      <option name="EMULATE_TERMINAL" value="false" />
+      <option name="MODULE_MODE" value="false" />
+      <option name="REDIRECT_INPUT" value="false" />
+      <option name="INPUT_FILE" value="" />
+      <method v="2" />
+    </configuration>
     <configuration name="main" type="PythonConfigurationType" factoryName="Python" nameIsGenerated="true">
       <module name="PQ_LTeamProject" />
       <option name="ENV_FILES" value="" />
@@ -97,6 +148,11 @@
       <option name="INPUT_FILE" value="" />
       <method v="2" />
     </configuration>
+    <recent_temporary>
+      <list>
+        <item itemvalue="Python.main (1)" />
+      </list>
+    </recent_temporary>
   </component>
   <component name="SharedIndexes">
     <attachedChunks>
@@ -132,7 +188,10 @@
       <workItem from="1752758954962" duration="790000" />
       <workItem from="1752944278778" duration="6217000" />
       <workItem from="1753103983738" duration="239000" />
-      <workItem from="1753104261613" duration="2131000" />
+      <workItem from="1753104261613" duration="3031000" />
+      <workItem from="1753194477526" duration="594000" />
+      <workItem from="1753269894913" duration="1101000" />
+      <workItem from="1753353055586" duration="5429000" />
     </task>
     <task id="LOCAL-00001" summary="这是一段测试文本。">
       <option name="closed" value="true" />
@@ -262,7 +321,15 @@
       <option name="project" value="LOCAL" />
       <updated>1753104087144</updated>
     </task>
-    <option name="localTasksCounter" value="17" />
+    <task id="LOCAL-00017" summary="上传voiceFileToTxt.py文件，完成音频文件处理模块">
+      <option name="closed" value="true" />
+      <created>1753186116588</created>
+      <option name="number" value="00017" />
+      <option name="presentableId" value="LOCAL-00017" />
+      <option name="project" value="LOCAL" />
+      <updated>1753186116588</updated>
+    </task>
+    <option name="localTasksCounter" value="18" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -289,9 +356,11 @@
     <MESSAGE value="杂务文件" />
     <MESSAGE value="添加标准配置文件" />
     <MESSAGE value="上传txtToTxt.py文件，完成多源文本文件处理模块" />
-    <option name="LAST_COMMIT_MESSAGE" value="上传txtToTxt.py文件，完成多源文本文件处理模块" />
+    <MESSAGE value="上传voiceFileToTxt.py文件，完成音频文件处理模块" />
+    <option name="LAST_COMMIT_MESSAGE" value="上传voiceFileToTxt.py文件，完成音频文件处理模块" />
   </component>
   <component name="com.intellij.coverage.CoverageDataManagerImpl">
-    <SUITE FILE_PATH="coverage/PQ_LTeamProject$main.coverage" NAME="main 覆盖结果" MODIFIED="1752065036842" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/DataDetectionAndQuizGeneration" />
+    <SUITE FILE_PATH="coverage/PQ_LTeamProject$main__1_.coverage" NAME="main (1) 覆盖结果" MODIFIED="1753359663922" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/DataDetectionAndQuizGeneration/AIFiles" />
+    <SUITE FILE_PATH="coverage/PQ_LTeamProject$main.coverage" NAME="main 覆盖结果" MODIFIED="1753355707690" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$" />
   </component>
 </project>
\ No newline at end of file
Index: DataDetectionAndQuizGeneration/AIFiles/Quiz/generated_quiz.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/Quiz/generated_quiz.txt b/DataDetectionAndQuizGeneration/AIFiles/Quiz/generated_quiz.txt
new file mode 100644
--- /dev/null	(date 1753359732836)
+++ b/DataDetectionAndQuizGeneration/AIFiles/Quiz/generated_quiz.txt	(date 1753359732836)
@@ -0,0 +1,44 @@
+以下是基于提供的文本内容设计的7道高质量选择题。题目覆盖了文本中的关键知识点，包括综述主题、作者信息、方法分类、数据集、评价标准和未来挑战。题目难度适中，适合大学四年级计算机科学或人工智能相关专业学生的认知水平。每道题有4个选项，只有1个正确答案。题目格式严格按照要求：问题后列出A、B、C、D选项，最后标注答案。
+
+---
+
+### 选择题
+
+1. **问题：** 这篇题为“弱监督场景下的行人重识别研究综述”的论文，主要关注哪一类型场景的行人重识别问题？  
+   A. 有监督场景（所有训练数据均有标注）  
+   B. 弱监督场景（包括无监督和半监督场景）  
+   C. 完全无监督场景（无任何标注信息）  
+   D. 强化学习场景（基于奖励机制）  
+   **答案: B**  
+   *解析：文本摘要明确指出“关注于弱监督场景下的行人重识别算法，包括无监督场景和半监督场景”，强调弱监督场景的应用价值。*
+
+2. **问题：** 该论文的通讯作者是谁？其所属机构是什么？  
+   A. 祁磊，计算机软件新技术国家重点实验室（南京大学）  
+   B. 于沛泽，中国科学院软件研究所  
+   C. 高阳，南京大学  
+   D. 祁磊，中国科学院软件研究所  
+   **答案: C**  
+   *解析：文本作者信息部分标注“通讯作者: 高阳, E-mail: gaoy@nju.edu.cn”，机构为“计算机软件新技术国家重点实验室（南京大学）”。*
+
+3. **问题：** 在无监督行人重识别方法中，论文将现有技术分为几类？其中哪一类主要使用生成对抗网络（GAN）进行图像风格迁移？  
+   A. 4类；基于伪标记的方法  
+   B. 5类；基于图像生成的方法  
+   C. 5类；基于实例分类的方法  
+   D. 6类；基于领域自适应的方法  
+   **答案: B**  
+   *解析：文本第2章“无监督场景下的行人重识别问题”将方法划分为5类（基于伪标记、图像生成、实例分类、领域自适应、其他），并指出“基于图像生成的方法”利用GAN进行跨域图像风格迁移（如CycleGAN）。*
+
+4. **问题：** 半监督行人重识别方法根据场景类型被分为几类？哪一类设定在实际应用中因需全数据集标注而实用性较低？  
+   A. 3类；基于tracklet学习的场景  
+   B. 4类；每一个人有少量标记的场景  
+   C. 4类；摄像头内有标记但摄像头间无标记的场景  
+   D. 5类；少量的人有标记的场景  
+   **答案: B**  
+   *解析：文本第3章“半监督场景下的行人重识别问题”划分为4类，并指出“每一个人有少量标记的场景”需要知道整个数据集的行人数量，这通常需全数据集标注，成本高且不实用。*
+
+5. **问题：** 以下哪个数据集是视频行人重识别常用的benchmark？其主要特点是什么？  
+   A. Market1501；图像数据集，使用DPM检测器  
+   B. MARS；视频数据集，包含tracklet信息  
+   C. DukeMTMC-reID；图像数据集，人工裁剪标注框  
+   D. CUHK03；图像数据集，有两种标注协议  
+   **答案: B
\ No newline at end of file
Index: DataDetectionAndQuizGeneration/AIFiles/inputFiles/yolo.txt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/inputFiles/yolo.txt b/DataDetectionAndQuizGeneration/AIFiles/inputFiles/yolo.txt
new file mode 100644
--- /dev/null	(date 1753354859284)
+++ b/DataDetectionAndQuizGeneration/AIFiles/inputFiles/yolo.txt	(date 1753354859284)
@@ -0,0 +1,74 @@
+核心思想：You Only Look Once (YOLO)
+想象你要在一张繁忙街道的照片里找出所有的行人、汽车和交通灯。传统方法可能像：
+滑动窗口： 拿个“放大镜”在图片上一点点移动检查（非常慢！）。
+两阶段检测器： 先找一堆“可能区域”，再对这些区域逐个细看（如 R-CNN 系列，准但慢）。
+YOLO 的思路很暴力：
+只看一次！ 把整张图片一次性“喂”给神经网络。
+网格划分： 把图片想象成划分成 S x S 个小格子（比如 13x13）。
+每个格子负责： 每个小格子就像一个“小侦探”，负责检查自己这块区域：
+有没有目标中心落在我这里？（目标中心点落在哪个格子，哪个格子就负责预测它）
+目标边界框在哪？（预测一个框框住目标：中心点坐标 x, y + 框的宽 w + 框的高 h）
+目标是什么？（预测目标的类别概率：行人？汽车？交通灯？）
+这个目标有多“靠谱”？（预测一个“置信度”，表示这个框里确实有目标且框得准不准）
+YOLOv8 的结构（流水线工厂）：
+想象一个高效的工厂流水线，由几个主要车间组成：
+主干网络：
+作用： 特征提取器。像“初级信息筛选车间”。
+输入： 原始图片像素。
+工作： 用多层卷积神经网络（CNN）不断提取图片的特征。前面的层抓取边缘、颜色等基础特征；后面的层抓取更复杂的特征，如车轮、人脸轮廓等。
+输出： 一系列越来越“抽象”但信息量越来越浓缩的“特征图”。
+YOLOv8 特色： 通常使用改进的 CSPNet 结构（比如 C2f 模块）。这就像在车间里优化了工作流程，让信息在“流水线”的不同分支间更好地流动和融合，减少计算量（更快）同时保留更多信息（更准）。核心是跨阶段部分连接，避免信息阻塞。
+颈部网络：
+作用： 特征融合器。像“信息整合与分发中心”。
+输入： 主干网络输出的不同尺度的特征图（高层特征：语义信息强，知道“是什么”，但位置模糊；低层特征：位置信息准，知道“在哪”，但语义弱）。
+工作： 将不同层次、不同尺度的特征图巧妙地融合起来。常用技术是 FPN 和 PAN：
+FPN： 像“自顶向下广播”。把高层（语义强）的特征图进行上采样（放大），然后和低层（位置准）的特征图相加融合。这样低层特征也“知道”高层语义了。
+PAN： 像“自底向上反馈”。在 FPN 基础上，再把融合后的低层特征进行下采样（缩小），然后和高层特征再次融合。这样高层特征也“知道”更精确的位置了。
+输出： 几组（通常是3组）融合了丰富语义和精确位置信息的特征图，它们分别对应检测不同尺度的目标（大、中、小）。
+YOLOv8 特色： 使用 PAN-FPN 结构，实现了更充分的双向（上下）信息融合。
+检测头：
+作用： 预测生成器。像“最终决策与包装车间”。
+输入： 颈部网络输出的、针对不同目标尺度的融合特征图。
+工作： 对每个输入的特征图进行处理：
+每个特征图也被划分为网格（比如特征图尺寸是 13x13，就是 13x13 个格子）。
+每个格子预测 N 个边界框：
+边界框参数： 预测每个框相对于其所在格子的精确位置 (x, y) 和尺寸 (w, h)。（YOLOv8 是 Anchor-Free 的，不像早期 YOLO 依赖预设的锚框模板，直接预测偏移量，更灵活）。
+置信度： 预测这个框包含目标且框得准的概率 (Objectness Score)。
+分类概率： 预测这个框里的目标属于各个类别的概率分布（用 softmax 或 sigmoid，v8 通常用 sigmoid 支持多标签）。
+输出： 一堆预测的边界框（Box）、置信度（Confidence）和类别概率（Class Probabilities）。每个尺度的特征图输出一组这样的预测。
+YOLOv8 特色： 采用 解耦头。早期 YOLO 用一个卷积层同时预测位置、置信度和分类。YOLOv8 把这三个任务稍微分开处理（“解耦”），用不同的分支（小卷积层）分别优化，这样每个任务都能做得更好。
+YOLOv8 的原理（侦探们如何协同工作）：
+输入与划分： 一张图片进来，被缩放（如 640x640）并送入主干。
+特征提取： 主干网络层层卷积，提取从低级到高级的特征，生成不同尺度的特征图。
+特征融合： 颈部网络（PAN-FPN）将这些不同尺度的特征图上下融合，生成富含语义和位置信息的特征图（大、中、小目标专用）。
+预测生成： 检测头分别处理这些融合后的特征图：
+对于大尺度特征图（分辨率高）：适合检测小目标（很多格子覆盖小物体）。
+对于中等尺度特征图：适合检测中等目标。
+对于小尺度特征图（分辨率低）：适合检测大目标（一个格子就能覆盖）。
+每个特征图上的每个格子，预测 N 个边界框（位置、宽高）、1 个置信度、C 个类别概率（C 是类别总数）。
+后处理 - 非极大值抑制： 侦探们（格子）报告了大量预测框，肯定有很多重叠和错误的。
+过滤低置信度： 先把置信度很低的框扔掉（比如 < 0.25）。
+按类别 NMS： 对剩下的框，按类别分组处理。对于同一类别的框：
+找到置信度最高的框。
+计算这个框和其他所有同类别框的重叠面积（IoU - 交并比）。
+删除那些和最高分框重叠度太高（IoU > 某个阈值，如 0.45）的框（它们很可能指的是同一个目标）。
+在剩下的框里重复找最高分、删重叠高的，直到处理完。
+输出： 最终保留的框就是检测到的目标，带有位置、类别和置信度。
+YOLOv8 的关键优势（为什么它牛）：
+快！ (Speed)： “只看一次”的核心思想 + 高效的网络结构（CSP, PAN-FPN）+ Anchor-Free 减少了计算量，使其在 CPU/GPU 甚至移动端都能实时运行。
+准！ (Accuracy)：
+强大的特征融合（PAN-FPN）让模型同时“看清”是什么和在哪。
+解耦头让位置、置信度、分类预测更精准。
+Anchor-Free 避免了预设锚框与数据不匹配的问题，更灵活。
+先进的损失函数（如分类用 BCEWithLogitsLoss, 位置用 CIOU Loss/DFL）更好地指导模型学习。
+易用 (User-Friendly)： Ultralytics 提供了极其完善的 API 和文档，训练、验证、部署都非常方便，生态丰富。
+总结一下：
+想象 YOLOv8 是一个高效的“目标检测工厂”：
+主干 (Backbone)： 初级原料（像素）加工，提取基础到复杂的特征（零件）。
+颈部 (Neck)： 将不同车间（不同尺度）生产出的零件（特征）进行优化组合（FPN+PAN），组装成更强大的半成品（融合特征）。
+检测头 (Head)： 在最终装配线上，工人们（格子）根据半成品，负责判断：
+我这儿有没有目标中心？(置信度)
+目标框的精确位置和大小？(x, y, w, h)
+目标是啥？(分类概率)
+后处理 (NMS)： 质检部门，剔除掉重复的、不可信的检测结果，输出最终合格的“产品”（检测到的目标框和类别）
+整个过程只对图片扫描一次，结合强大的特征提取、融合和精准的预测头，实现了速度和精度的优秀平衡。
\ No newline at end of file
Index: DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import easyocr\r\ndef process(file_path):\r\n    \"\"\"\r\n        使用 EasyOCR 识别图片中的文字。\r\n        参数:\r\n            image_path: 图片文件路径。\r\n            lang: 语言代码，默认为简体中文（'ch_sim'）。\r\n        返回:\r\n            识别出的文字列表。\r\n        \"\"\"\r\n    # 创建 EasyOCR Reader，指定语言为简体中文\r\n    reader = easyocr.Reader(['ch_sim'])\r\n    # 读取图片并识别文字\r\n    results = reader.readtext(file_path)\r\n    if results:\r\n        print(\"识别出的文字：\")\r\n        for (bbox, text, prob) in results:\r\n            print(f\"文本: {text}, 置信度: {prob}\")\r\n            with open(\"txt_QuizSource/ppt_text.txt\", \"a\", encoding=\"utf-8\") as f:\r\n                f.write(text)\r\n    else:\r\n        print(\"未识别到文字\")\r\n\r\ndef ocr_image(image_path, lang='ch_sim'):\r\n    \"\"\"\r\n    使用 EasyOCR 识别图片中的文字。\r\n    参数:\r\n        image_path: 图片文件路径。\r\n        lang: 语言代码，默认为简体中文（'ch_sim'）。\r\n    返回:\r\n        识别出的文字列表。\r\n    \"\"\"\r\n    # 创建 EasyOCR Reader，指定语言为简体中文\r\n    reader = easyocr.Reader([lang])\r\n    # 读取图片并识别文字\r\n    results = reader.readtext(image_path)\r\n    return results\r\n\r\n# 示例用法\r\nimage_path = \"videoPicture/frame_0015.jpg\"  # 替换为你的图片路径\r\nrecognized_text = ocr_image(image_path, lang='ch_sim')  # 使用简体中文模型\r\n\r\nif recognized_text:\r\n    print(\"识别出的文字：\")\r\n    for (bbox, text, prob) in recognized_text:\r\n        print(f\"文本: {text}, 置信度: {prob}\")\r\nelse:\r\n    print(\"未识别到文字\")\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py b/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py
--- a/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/PPTPictureToTxt.py	(date 1753359336939)
@@ -20,6 +20,10 @@
                 f.write(text)
     else:
         print("未识别到文字")
+    generated = []
+    generated.append('txt_QuizSource/ppt_text.txt')
+    return generated
+
 
 def ocr_image(image_path, lang='ch_sim'):
     """
@@ -37,7 +41,7 @@
     return results
 
 # 示例用法
-image_path = "videoPicture/frame_0015.jpg"  # 替换为你的图片路径
+image_path = ""  # 替换为你的图片路径
 recognized_text = ocr_image(image_path, lang='ch_sim')  # 使用简体中文模型
 
 if recognized_text:
Index: DataDetectionAndQuizGeneration/AIFiles/main.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/main.py b/DataDetectionAndQuizGeneration/AIFiles/main.py
--- a/DataDetectionAndQuizGeneration/AIFiles/main.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/main.py	(date 1753358641629)
@@ -1,1 +1,233 @@
+import os
+import importlib
+import logging
+import glob
+import re
+from collections import defaultdict, deque
+from openai import OpenAI
+
+# 配置日志
+logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
+
+# 文件类型与处理模块的映射
+PROCESSOR_MAPPING = {
+    # 视频文件
+    '.mp4': 'videoPPTDetect',
+    '.avi': 'videoPPTDetect',
+    '.mov': 'videoPPTDetect',
+    '.mkv': 'videoPPTDetect',
+
+    # PDF文件
+    '.pdf': 'pdfToTxt',
+
+    # 图像文件
+    '.jpg': 'PPTPictureToTxt',
+    '.jpeg': 'PPTPictureToTxt',
+    '.png': 'PPTPictureToTxt',
+
+    # 文本文件
+    '.txt': 'txtToTxt',
+    '.doc': 'txtToTxt',
+    '.docx': 'txtToTxt',
+    '.ppt': 'txtToTxt',
+    '.pptx': 'txtToTxt',
+    '.xls': 'txtToTxt',
+    '.xlsx': 'txtToTxt',
+
+    # 音频文件
+    '.wav': 'voiceFileToTxt',
+}
+
+# OpenAI客户端配置
+OPENAI_CLIENT = OpenAI(
+    base_url="https://openrouter.ai/api/v1",
+    api_key="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",
+)
+
+
+def get_file_processor(file_path):
+    """获取文件对应的处理模块"""
+    ext = os.path.splitext(file_path)[1].lower()
+    module_name = PROCESSOR_MAPPING.get(ext)
+    if not module_name:
+        return None
+
+    try:
+        return importlib.import_module(module_name)
+    except ImportError:
+        logging.error(f"处理模块 {module_name} 未找到 (文件: {file_path})")
+    except Exception as e:
+        logging.error(f"导入模块 {module_name} 时出错: {str(e)}")
+    return None
+
+
+def process_directory(directory):
+    """处理目录中的所有文件"""
+    # 使用队列管理待处理文件（包括新生成的）
+    file_queue = deque()
+    processed_files = set()
+    unsupported_files = []
+
+    # 初始扫描目录
+    for filename in sorted(os.listdir(directory)):
+        file_path = os.path.join(directory, filename)
+        if os.path.isfile(file_path):
+            if get_file_processor(filename):
+                file_queue.append(file_path)
+            else:
+                unsupported_files.append(filename)
+
+    # 记录不支持的文件
+    if unsupported_files:
+        logging.warning(f"跳过 {len(unsupported_files)} 个不支持的文件: {', '.join(unsupported_files)}")
+
+    # 处理队列中的文件
+    while file_queue:
+        file_path = file_queue.popleft()
+
+        # 跳过已处理文件
+        if file_path in processed_files:
+            continue
+
+        processed_files.add(file_path)
+        filename = os.path.basename(file_path)
+
+        processor_module = get_file_processor(filename)
+        if not processor_module:
+            continue
+
+        try:
+            logging.info(f"处理: {filename}")
+
+            # 调用处理模块并获取生成的新文件列表
+            new_files = processor_module.process(file_path)
+
+            # 将新生成的文件添加到队列
+            if new_files:
+                logging.info(f"添加 {len(new_files)} 个新生成文件到处理队列")
+                for new_file in new_files:
+                    if os.path.isfile(new_file) and new_file not in processed_files:
+                        file_queue.append(new_file)
+
+        except Exception as e:
+            logging.error(f"处理文件 {file_path} 失败: {str(e)}")
+
+    return processed_files
+
+
+def generate_quiz_from_texts():
+    """从txt_QuizSource目录中的txt文件生成选择题"""
+    quiz_source_dir = "txt_QuizSource"
+    quiz_output_file = "Quiz/generated_quiz.txt"
 
+    # 确保目录存在
+    if not os.path.exists(quiz_source_dir):
+        os.makedirs(quiz_source_dir)
+        logging.info(f"创建目录: {quiz_source_dir}")
+        return
+
+    # 收集所有txt文件内容
+    txt_files = glob.glob(os.path.join(quiz_source_dir, "*.txt"))
+    if not txt_files:
+        logging.warning(f"{quiz_source_dir} 目录中没有找到txt文件")
+        return
+
+    combined_content = ""
+    for file_path in txt_files:
+        try:
+            with open(file_path, 'r', encoding='utf-8') as f:
+                content = f.read().strip()
+                if content:
+                    combined_content += f"### 文本片段:\n{content}\n\n"
+        except Exception as e:
+            logging.error(f"读取文件 {file_path} 失败: {str(e)}")
+
+    if not combined_content:
+        logging.warning(f"{quiz_source_dir} 目录中的txt文件均为空")
+        return
+
+    # 生成提示词
+    prompt = (
+        "你是一位大学老师，需要根据以下的内容为大学四年级学生设计多道高质量的选择题。\n"
+        "要求：\n"
+        "1. 题目难度适中，符合大四学生认知水平\n"
+        "2. 每道题有4个选项，只有1个正确答案\n"
+        "3. 题目应覆盖文本中的关键知识点\n"
+        "4. 题目格式：'问题\nA. 选项A\nB. 选项B\nC. 选项C\nD. 选项D\n答案: [选项字母]'\n\n"
+        "文本内容:\n"
+        f"{combined_content}"
+    )
+
+    logging.info("开始生成选择题...")
+
+    try:
+        # 调用OpenAI API生成题目
+        completion = OPENAI_CLIENT.chat.completions.create(
+            model="deepseek/deepseek-r1-0528:free",
+            messages=[
+                {"role": "system", "content": "你是一位经验丰富的大学老师，擅长根据文本内容设计高质量的选择题"},
+                {"role": "user", "content": prompt}
+            ],
+            max_tokens=2000,
+            temperature=0.7
+        )
+
+        quiz_content = completion.choices[0].message.content
+
+        # 保存生成的题目
+        with open(quiz_output_file, 'w', encoding='utf-8') as f:
+            f.write("")
+        with open(quiz_output_file, 'a', encoding='utf-8') as f:
+            f.write(quiz_content)
+        logging.info(f"已生成选择题并保存到: {quiz_output_file}")
+
+        # 清空txt_QuizSource目录中的文件
+        for file_path in txt_files:
+            try:
+                with open(file_path, 'w', encoding='utf-8') as f:
+                    f.write("")  # 清空文件内容
+            except Exception as e:
+                logging.error(f"清空文件 {file_path} 失败: {str(e)}")
+        logging.info(f"已清空 {quiz_source_dir} 目录中的文件内容")
+
+    except Exception as e:
+        logging.error(f"生成选择题失败: {str(e)}")
+
+
+def clean_directory(directory):
+    """清理目录中的空文件和临时文件"""
+    logging.info(f"清理目录: {directory}")
+    for filename in os.listdir(directory):
+        file_path = os.path.join(directory, filename)
+        if os.path.isfile(file_path):
+            try:
+                # 删除空文件
+                if os.path.getsize(file_path) == 0:
+                    os.remove(file_path)
+                    logging.info(f"删除空文件: {filename}")
+                # 删除临时文件（示例，根据实际需求调整）
+                elif filename.endswith('.tmp') or filename.startswith('~'):
+                    os.remove(file_path)
+                    logging.info(f"删除临时文件: {filename}")
+            except Exception as e:
+                logging.error(f"处理文件 {filename} 失败: {str(e)}")
+
+
+if __name__ == "__main__":
+    # 配置要处理的文件夹路径
+    TARGET_DIRECTORY = "inputFiles"
+    QUIZ_SOURCE_DIR = "txt_QuizSource"
+
+    if not os.path.exists(TARGET_DIRECTORY):
+        logging.error(f"目标文件夹不存在: {TARGET_DIRECTORY}")
+    else:
+        logging.info(f"开始处理目录: {TARGET_DIRECTORY}")
+        processed_files = process_directory(TARGET_DIRECTORY)
+        logging.info(f"所有文件处理完成，共处理 {len(processed_files)} 个文件")
+
+        # 生成选择题
+        generate_quiz_from_texts()
+
+        # 清理inputFiles目录
+        clean_directory(TARGET_DIRECTORY)
+        logging.info("程序执行完毕")
\ No newline at end of file
Index: DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import cv2\r\nimport os\r\nimport numpy as np\r\nfrom skimage.metrics import structural_similarity as ssim\r\ndef extract_frames(video_path, output_folder, frame_interval=1):\r\n    # 创建输出文件夹（如果不存在）\r\n    if not os.path.exists(output_folder):\r\n        os.makedirs(output_folder)\r\n    # 打开视频文件\r\n    cap = cv2.VideoCapture(video_path)\r\n    if not cap.isOpened():\r\n        print(\"无法打开视频文件\")\r\n        return\r\n    frame_count = 0\r\n    saved_frame_count = 0\r\n    while True:\r\n        ret, frame = cap.read()\r\n        if not ret:\r\n            break\r\n        if frame_count % frame_interval == 0:\r\n            output_path = os.path.join(output_folder, f\"frame_{saved_frame_count:04d}.jpg\")\r\n            cv2.imwrite(output_path, frame)\r\n            saved_frame_count += 1\r\n\r\n        frame_count += 1\r\n\r\n    cap.release()\r\n    print(f\"共抽取并保存了 {saved_frame_count} 帧到 {output_folder}\")\r\ndef phash(image, shape=(32, 32)):\r\n    \"\"\"\r\n    计算图像的感知哈希值。\r\n    参数:\r\n        image: 输入图像。\r\n        shape: 缩放后的图像尺寸，默认为 32x32。\r\n    返回:\r\n        哈希值（十六进制字符串）。\r\n    \"\"\"\r\n    # 缩放图像\r\n    resized = cv2.resize(image, shape, interpolation=cv2.INTER_AREA)\r\n    # 转换为灰度图\r\n    gray = cv2.cvtColor(resized, cv2.COLOR_BGR2GRAY)\r\n    # 计算 DCT\r\n    dct = cv2.dct(np.float32(gray))\r\n    # 取左上角 8x8 的 DCT 系数\r\n    dct_low_frequency = dct[:8, :8]\r\n    # 计算平均值\r\n    avg = np.mean(dct_low_frequency)\r\n    # 生成哈希值\r\n    hash_str = ''.join(['1' if pixel >= avg else '0' for pixel in dct_low_frequency.flatten()])\r\n    # 转换为十六进制\r\n    return ''.join([f'{int(hash_str[i:i+4], 2):x}' for i in range(0, len(hash_str), 4)])\r\n\r\ndef find_similar_images(image_paths, threshold=0.95):\r\n    \"\"\"\r\n    检测大体上重复的图片。\r\n    参数:\r\n        image_paths: 图片路径列表。\r\n        threshold: SSIM 相似度阈值，默认为 0.95。\r\n    返回:\r\n        相似图片的索引对列表。\r\n    \"\"\"\r\n    similar_pairs = []\r\n    num_images = len(image_paths)\r\n\r\n    for i in range(num_images):\r\n        img1 = cv2.imread(image_paths[i])\r\n        if img1 is None:\r\n            print(f\"无法加载图片 {image_paths[i]}\")\r\n            continue\r\n\r\n        for j in range(i + 1, num_images):\r\n            img2 = cv2.imread(image_paths[j])\r\n            if img2 is None:\r\n                print(f\"无法加载图片 {image_paths[j]}\")\r\n                continue\r\n\r\n            # 计算 SSIM\r\n            gray1 = cv2.cvtColor(img1, cv2.COLOR_BGR2GRAY)\r\n            gray2 = cv2.cvtColor(img2, cv2.COLOR_BGR2GRAY)\r\n            similarity, _ = ssim(gray1, gray2, full=True)\r\n\r\n            if similarity >= threshold:\r\n                similar_pairs.append((i, j))\r\n\r\n    return similar_pairs\r\n\r\ndef remove_duplicate_images(image_paths, threshold=0.95):\r\n    \"\"\"\r\n    删除重复度较高的图片，只保留重复度较低的图片。\r\n    参数:\r\n        image_paths: 图片路径列表。\r\n        threshold: SSIM 相似度阈值。\r\n    \"\"\"\r\n    similar_pairs = find_similar_images(image_paths, threshold)\r\n\r\n    if not similar_pairs:\r\n        print(\"未发现重复或相似的图片，无需删除。\")\r\n        return\r\n\r\n    # 创建一个集合来记录需要删除的图片索引\r\n    to_delete_indices = set()\r\n    for pair in similar_pairs:\r\n        to_delete_indices.add(pair[1])  # 保留索引较小的图片，删除索引较大的图片\r\n\r\n    # 删除重复度较高的图片\r\n    for index in sorted(to_delete_indices, reverse=True):  # 从大到小删除，避免索引变化\r\n        os.remove(image_paths[index])\r\n        print(f\"已删除图片：{image_paths[index]}\")\r\n\r\ndef process(file_path):\r\n video_path = file_path  # 替换视频文件路径\r\n output_folder = \"inputFiles\"  # 替换为保存帧的文件夹路径\r\n frame_interval = 30  # 每30帧抽取一次\r\n extract_frames(video_path, output_folder, frame_interval)\r\n# 示例用法\r\nfolder_path = \"videoPicture\"  # 替换为你的图片文件夹路径\r\nimage_paths = [os.path.join(folder_path, filename) for filename in os.listdir(folder_path) if filename.lower().endswith(('.png', '.jpg', '.jpeg'))]\r\nremove_duplicate_images(image_paths, threshold=0.9)#调阈值，越高判定越严格，越不会轻易删图
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py b/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py
--- a/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py	(revision 9b1086d545c14b2e7596fc3462de119dc5b3c513)
+++ b/DataDetectionAndQuizGeneration/AIFiles/videoPPTDetect.py	(date 1753359301755)
@@ -112,7 +112,10 @@
  output_folder = "inputFiles"  # 替换为保存帧的文件夹路径
  frame_interval = 30  # 每30帧抽取一次
  extract_frames(video_path, output_folder, frame_interval)
+ generated = []
+ generated.append('inputFiles')
+ return generated
 # 示例用法
-folder_path = "videoPicture"  # 替换为你的图片文件夹路径
+folder_path = "testFiles"  # 替换为你的图片文件夹路径
 image_paths = [os.path.join(folder_path, filename) for filename in os.listdir(folder_path) if filename.lower().endswith(('.png', '.jpg', '.jpeg'))]
-remove_duplicate_images(image_paths, threshold=0.9)#调阈值，越高判定越严格，越不会轻易删图
\ No newline at end of file
+remove_duplicate_images(image_paths, threshold=0.8)#调阈值，越高判定越严格，越不会轻易删图
diff --git a/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/ppt_text.txt b/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/ppt_text.txt
new file mode 100644
diff --git a/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/txt_text.txt b/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/txt_text.txt
new file mode 100644
diff --git a/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/voice_text.txt b/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/voice_text.txt
new file mode 100644
diff --git a/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/pdf_text.txt b/DataDetectionAndQuizGeneration/AIFiles/txt_QuizSource/pdf_text.txt
new file mode 100644
